use chrono::{Local, Timelike};
use crossterm::{
    event::{self, Event, KeyCode},
    execute,
    terminal::{EnterAlternateScreen, LeaveAlternateScreen, disable_raw_mode, enable_raw_mode},
};
use ratatui::{Terminal, backend::CrosstermBackend, layout::Rect};
use std::io::stdout;
use std::{io, time::Duration};

/// Bresenham line algorithm to draw a line from (x0, y0) to (x1, y1)
fn draw_line(grid: &mut [Vec<char>], x0: i32, y0: i32, x1: i32, y1: i32, c: char) {
    let dx = (x1 - x0).abs();
    let sx = if x0 < x1 { 1 } else { -1 };
    let dy = -(y1 - y0).abs();
    let sy = if y0 < y1 { 1 } else { -1 };
    let mut err = dx + dy;
    let mut x = x0;
    let mut y = y0;

    loop {
        if y >= 0 && y < grid.len() as i32 && x >= 0 && x < grid[0].len() as i32 {
            grid[y as usize][x as usize] = c;
        }
        if x == x1 && y == y1 {
            break;
        }
        let e2 = 2 * err;
        if e2 >= dy {
            err += dy;
            x += sx;
        }
        if e2 <= dx {
            err += dx;
            y += sy;
        }
    }
}

/// Generate the clock grid with hands
fn draw_clock(area: Rect) -> Vec<String> {
    let width = area.width as i32;
    let height = area.height as i32;
    let mut grid = vec![vec![' '; width as usize]; height as usize];

    let cx = width / 2;
    let cy = height / 2;
    let radius = (width.min(height) / 2) - 2;
    let y_scale = 0.5; // vertical compression to make the circle look circular in terminals

    // Draw clock circle
    for y in 0..height {
        for x in 0..width {
            let dx = x - cx;
            let dy = ((y - cy) as f64 / y_scale) as i32;
            let dist = ((dx * dx + dy * dy) as f64).sqrt();
            if (dist - radius as f64).abs() < 0.7 {
                grid[y as usize][x as usize] = 'o';
            }
        }
    }

    let now = Local::now();

    let second_angle = (now.second() as f64 / 60.0) * std::f64::consts::TAU;
    let minute_angle = (now.minute() as f64 / 60.0) * std::f64::consts::TAU;
    let hour_angle = (((now.hour() % 12) as f64 / 12.0) * std::f64::consts::TAU)
        + ((now.minute() as f64 / 60.0) * (std::f64::consts::TAU / 12.0));

    // Properly scaled hand lengths
    let hour_length = (radius as f64 * 0.45) as i32;
    let minute_length = (radius as f64 * 0.75) as i32;
    let second_length = (radius as f64 * 0.9) as i32;

    // Hour hand
    let hx = cx + (hour_angle.sin() * hour_length as f64) as i32;
    let hy = cy - (hour_angle.cos() * hour_length as f64 * y_scale) as i32;
    draw_line(&mut grid, cx, cy, hx, hy, '#');

    // Minute hand
    let mx = cx + (minute_angle.sin() * minute_length as f64) as i32;
    let my = cy - (minute_angle.cos() * minute_length as f64 * y_scale) as i32;
    draw_line(&mut grid, cx, cy, mx, my, '*');

    // Second hand
    let sx = cx + (second_angle.sin() * second_length as f64) as i32;
    let sy = cy - (second_angle.cos() * second_length as f64 * y_scale) as i32;
    draw_line(&mut grid, cx, cy, sx, sy, '.');

    grid.into_iter()
        .map(|row| row.into_iter().collect())
        .collect()
}

fn main() -> io::Result<()> {
    enable_raw_mode()?;
    let mut stdout = stdout();
    execute!(stdout, EnterAlternateScreen)?;

    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    loop {
        terminal.draw(|f| {
            let size = f.area();
            let lines = draw_clock(size);
            for (y, line) in lines.iter().enumerate() {
                f.set_cursor_position((0, y as u16));
                print!("{}", line);
            }
        })?;

        // Wait 1 second or exit on 'q'
        if event::poll(Duration::from_millis(1000))?
            && matches!(event::read()?, Event::Key(key) if key.code == KeyCode::Char('q'))
        {
            break;
        }
    }

    disable_raw_mode()?;
    execute!(terminal.backend_mut(), LeaveAlternateScreen)?;
    Ok(())
}
